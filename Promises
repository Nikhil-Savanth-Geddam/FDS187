<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        // let myPromise=new Promise((resolve,reject)=>{
        // let success=true;
        // if(success){
        //     resolve("the operation was successfully");
        // }
        // else{
        //     reject("the operation failed");
        // }
        // });
        // myPromise
        // .then(result=>{
        //     console.log(result);
        // })
        // .catch(error=>{
        //     console.log(error);
        // });
        // let promise=new Promise((resolve,reject)=>{
        // resolve(5);
        // // initial resolve valuse is 5
        // });
        // promise
        // .then(result=>{
        //     console.log(result)
        //     return result*2;
        // })
        // .then(result=>{
        //     console.log(result);
        //     return result+3;
        // })
        // .then(result=>{
        //     console.log(result);
        // })
        // .catch(error=>{
        //     console.log("error",error);
        // });
        let delayedPromise=new Promise((resolve,reject)=>{
        setTimeout(()=>{
            resolve("Promise resolved after 2 seconds");
        }, 2000); 
        });

        delayedPromise
            .then(result => {
                console.log(result); 
            })
            .catch(error => {
                console.log("Error:",error);
            });
    </script>
</body>
</html>
notes:
Promises:
A promise is special java-script object that represents the eventual completion(or failure) of an asynchronous operation
1 Three states:
1.Pending: the initial state ,the promise is still waiting for the operation to finish
2.Fulfilled: the operation completed succesfully
3.Rejected: the operation failed
Exp:
To create a promise new promise();
The promise constructor takes a function with two parameters:
Resolve--to mark as the promise is successful
Reject--to mark it as failed

Handling:
.then() method is called when the promise is fulfilled.
It receives the result from the resolve();
.catch() method is called when promise is rejected;
It receives the result from the reject();
Ex:
Let myPromise=new Promise((resolve,reject)=>{
Let success=true;
If(success){
Resolve(“the operation was successfully’);
}
Else{
Reject(“the operation failed”);
}
});
myPromise
.then(result=>{
Console.log(result);
})
.catch(error=>{
Console.log(error)
});
Outptu:
the operation was successfully
Example 2:
Chaining Promises:
-- you can have chain multiple .then()
Ex:
Let promise=new Promise((resolve,reject)=>{
Resolve(5);
// initial resolve valuse is 5
});
promise
.then(result=>{
Console.log(result)
Return result*2;
})
.then(result=>{
Console.log(result);
Return result+3;
});
.then(result=>{
Console.log(result);
});
.catch(error=>{
Console.log(“error”,error);
});
Output:
5
10
13 

        let delayedPromise=new Promise((resolve,reject)=>{
        setTimeout(()=>{
            resolve("Promise resolved after 2 seconds");
        }, 2000); 
        });

        delayedPromise
            .then(result => {
                console.log(result); 
            })
            .catch(error => {
                console.log("Error:",error);
            });
Output:
Promise resolved after 2 seconds
